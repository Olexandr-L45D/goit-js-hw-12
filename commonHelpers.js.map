{"version":3,"file":"commonHelpers.js","sources":["../src/js/pixaday-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["\nimport axios from 'axios';\nconst BASE_URL = \"https://pixabay.com/api/\";\nconst API_KEY = \"44760113-b733d2f51a4c6409aa3483a05\";\naxios.defaults.baseURL = BASE_URL;  //тут посилання на базовий УРЛ\n\n      const params = {\n        key: API_KEY,\n        q: \"str\",\n        page: 1,\n        per_page: 15,\n        image_type: \"imageType\",\n        orientation: 'horizontal',\n        safesearch: true,\n        maxPage: 0 // додатковий параметр(який я потім порахую) для обчислення останньої сторінки\n      };\n      export {params};    \n  async  function getAsyncImage(searchText) {\n    params.q = searchText;\n     const neWurls = new URLSearchParams(params);  \n    const response = await axios.get(`?${neWurls}`)\n      return response.data;\n    }\n    export {getAsyncImage};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n   ","//2 functions more\n\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\niziToast.settings({\n  timeout: 2500,\n  resetOnHover: true,\n  transitionIn: 'flipInX',\n  transitionOut: 'flipOutX',\n  position: 'topRight',\n  titleSize: 25,\n  messageSize: 25,\n  backgroundColor: 'rgba(255, 182, 66, 0.8)',\n});\nvar lightbox = new SimpleLightbox('.gallery a', { captionDelay: 200, captionsData: 'alt'  });\n\nexport const refs = {\n  formSearchImage: document.querySelector(\".uzers-form-image\"),\n  gallery: document.querySelector('.gallery'),\n  loader: document.querySelector('.loader'),\n};\n\nconst galleryContainer = document.querySelector('.gallery'); // function створює розмітку для галереї\ngalleryContainer.addEventListener('submit', renderGalleryMarkap);\n\n   export function renderGalleryMarkap(images) {\n    const element = document.getElementsByClassName(\".gallery\");\n    element.innerHTML = \"\";\n    const markup = images\n    .map((image) =>  \n      ` \n    <li class=\"gallery-item\">\n    <a class=\"gallery-link\" href=\"${image.largeImageURL}\">\n    <img class=\"gallery-image\" src=\"${image.webformatURL}\" alt=\"${image.tags}\" title=\"${image.name}\"/></a>\n    <div class=\"gallery-paragraf\">\n    <p class=\"gallery-commant\">likes ${image.likes}</p>\n    <p class=\"gallery-commant\">views ${image.views}</p>\n    <p class=\"gallery-commant\">comments ${image.comments}</p>\n    <p class=\"gallery-commant\">downloads ${image.downloads}</p>\n    </div>\n    </li> \n     ` )\n      .join(\"\")\n      galleryContainer.insertAdjacentHTML(\"beforeend\", markup);\n      lightbox.refresh();\n      \n  };\n\n// функція виклика повідомлення про помилку and iziToast\n\nexport function handlerErrorUzer(error) {\n  switch (error)\n    {\n    case 'outdata':\n      iziToast.warning({\n        title: 'Error',\n        message: 'Введіть данні для пошуку!',\n      });\n      break;\n    case 'nodata':\n      iziToast.warning({\n        title: 'Error',\n        message:\n          'Sorry, there are no images matching your search query. Please try again!',\n      });\n      break;\n    default:\n      iziToast.error({\n        title: 'Error',\n        message: 'Щось пішло не так. Ми працюемо над вирішенням питання!',\n      });\n      break;\n  }\n}\n\nconst loadMoreBtn = document.querySelector('[data-action=\"load-more\"]'); //  це прислуховуєм кнопку з спінером\nconst spinner = document.querySelector(\".spinner\")\n\nconst hiddenElementList = \"is-hidden\";\n// взагалі прирати (коли кінець колекції або до запиту(до сабміту))\nfunction hide(button) {\n  button.classList.add(hiddenElementList);\n}\n// активна\nfunction show(button) {\n  button.classList.remove(hiddenElementList);\n}\n// при запиті відображається але не активна для натискання і крутиться прелоудер-show this spinner\nfunction disable(button, spinner ) {\n  button.disable = true;\n  spinner.classList.remove(hiddenElementList);\n}\n// -show this button and hide this spinner\n function enable(button, spinner) {\n  button.disable = falce; \n  spinner.classList.add(hiddenElementList);\n }\nexport default {hide,\n  show, disable, enable};\n\n// приклад асинхронної стрілочної функції \n// const doStuff = async () => {\n    //   try {\n    //     const users = await getAsyncImage(); тут передаю функцію яку хочу обробити в try...catch\n    //     console.log(users);\n    //   } catch (error) {\n    //     console.log(error);\n    //   }\n    // };\n    \n    // doStuff();\n    // export {doStuff}\n\n//add code to list naxt clic\n//  const fetchPostsBtn = document.querySelector(\".js-btn\");// це кнопка перегортання далі на нову стаорінку при кліку\n//  const postList = document.querySelector(\".posts\");// це ул куди при кліку додаємо нову сторінку (та сама галерея)\n\n// let page = 1;\n// let limit = 10;\n// // In our case total number of pages is calculated on frontend\n// const totalPages = Math.ceil(100 / limit);\n\n// fetchPostsBtn.addEventListener(\"click\", async () => {\n//   // Check the end of the collection to display an alert (якщо колекція закінчилась)\n//   if (page > totalPages) {\n//     return iziToast.error({\n//       position: \"topRight\",\n//       message: \"We're sorry, but you've reached the end of search results.\"\n//     });\n//   }\n\n//   try {\n//     const posts = await fetchPosts();\n//     renderPosts(posts); // Increase the group number\n//     page += 1;\n//     if (page > 1) {\n//       fetchPostsBtn.textContent = \"Fetch more posts\";  // Replace button text after first request\n//     }\n//   } catch (error) {\n//     console.log(error);\n//   }\n// });\n// //У відповіді бекенд повертає властивість totalHits — загальна кількість зображень\n// async function fetchPosts() {\n//   const params = new URLSearchParams({\n//     _limit: limit,\n//     _page: page\n//   });\n\n//   const response = await axios.get(\n//     `key=${API_KEY}/posts?${params}`\n//   );\n//   return response.data;\n// }\n\n//  function renderPosts(images) {\n\n// const element = document.getElementsByClassName(\".posts\");\n//     element.innerHTML = \"\";\n//     const markup = images\n//     .map((image) =>  \n//       ` \n//     <li class=\"gallery-item\">\n//               <h2 class=\"post-title\">${title.slice(0, 15)}</h2>\n//     <a class=\"gallery-link\" href=\"${image.largeImageURL}\">\n//     <img class=\"gallery-image\" src=\"${image.webformatURL}\" alt=\"${image.tags}\" title=\"${image.name}\"/></a>\n//     <div class=\"gallery-paragraf\">\n//     <p class=\"gallery-commant\">likes ${image.likes}</p>\n//     <p class=\"gallery-commant\">views ${image.views}</p>\n//     <p class=\"gallery-commant\">comments ${image.comments}</p>\n//     <p class=\"gallery-commant\">downloads ${image.downloads}</p>\n//     </div>\n//     </li> \n//      ` )\n//       .join(\"\")\n//       postList.insertAdjacentHTML(\"beforeend\", markup);\n//       lightbox.refresh();\n//  }\n\n// Контролює кількість елементів в групі\n//let limit = 30;\n// Кількість груп в колекції\n//const totalPages = Math.ceil(100 / limit);\n// if (page > totalPages) {\n//   return iziToast.error({\n//     position: \"topRight\",\n//     message: \"We're sorry, there are no more posts to load\"\n//   });\n// }","\n\nimport {getAsyncImage, params} from \"./js/pixaday-api\"\n import {handlerErrorUzer, refs} from \"./js/render-functions\"\nimport {renderGalleryMarkap} from \"./js/render-functions\"\n\nrefs.formSearchImage.addEventListener('submit', onFormSubmit);\nlet searchText = \"\"  // робимо функцію onFormSubmit асинхронною\n\n async function onFormSubmit(event) {\n    event.preventDefault();\n    searchText = event.target.searchQuery.value.toLowerCase().trim();  //значення яке написав користувач(прибираєм пробіл та приводим до нижн регістра)\n  if (searchText === \"\") {\n    handlerErrorUzer('outdata');\n   // refs.loader.classList.add('loader');\n    return;\n  }\n     refs.gallery.innerHTML = '';\n     params.page = 1;\n    // refs.loader.classList.add('loader');\n\n    try { const {images, totalHits} = await getAsyncImage(params); //тут передаю функцію яку хочу обробити в try...catch\n    params.maxPage =  Math.ceil(totalHits/ params.per_page); // розрахунок максимальної кількості сторінок \n    console.log(images, totalHits); // images - змінна- масиви який створюю в renderGalleryMarkap\n       } catch (error) {\n         console.log(error);\n       }\n\n     getAsyncImage(searchText)// аналогія моєї передачі, але searchText-значення з pixaday-api (searchSettings.q = searchText;)\n    .then(data => {\n      renderGalleryMarkap(data.hits)\n     // refs.loader.classList.remove('loader');\n      if (data.totalHits === 0) {\n        handlerErrorUzer('nodata');  \n    }\n  }).catch(error => {\n   // refs.loader.classList.remove('loader');\n    console.log(error);\n    handlerErrorUzer(error);\n          })\n    .finally(() => \n      event.target.reset()); //очистка тексту в інпуті\n    }\n\n    // function showMoreElem(params) { // показує елемент\n    //  // refs.loader.classList.remove('loader');\n    // }\n\n    // function hiddenElement(params) { // ховає елемент\n    //   //refs.loader.classList.add('loader');\n    // }\n\n // при сабміті (після іфу) (треба це додати після першого іфу)\n//  try { const {images, totalHits} = await getAsyncImage(params); //тут передаю функцію яку хочу обробити в try...catch\n//  params.maxPage =  Math.ceil(totalHits/ params.per_page); // розрахунок максимальної кількості сторінок \n//  console.log(images, totalHits); // images - змінна- масиви який створюю в renderGalleryMarkap\n//     } catch (error) {\n//       console.log(error);\n//     }\n  "],"names":["BASE_URL","API_KEY","axios","params","getAsyncImage","searchText","neWurls","iziToast","lightbox","SimpleLightbox","refs","galleryContainer","renderGalleryMarkap","images","element","markup","image","handlerErrorUzer","error","onFormSubmit","event","totalHits","data"],"mappings":"owBAEA,MAAMA,EAAW,2BACXC,EAAU,qCAChBC,EAAM,SAAS,QAAUF,EAEnB,MAAMG,EAAS,CACb,IAAKF,EACL,EAAG,MACH,KAAM,EACN,SAAU,GACV,WAAY,YACZ,YAAa,aACb,WAAY,GACZ,QAAS,CACjB,EAEE,eAAgBG,EAAcC,EAAY,CACxCF,EAAO,EAAIE,EACV,MAAMC,EAAU,IAAI,gBAAgBH,CAAM,EAEzC,OADe,MAAMD,EAAM,IAAI,IAAII,CAAO,EAAE,GAC5B,IACtB,CCfAC,EAAS,SAAS,CAChB,QAAS,KACT,aAAc,GACd,aAAc,UACd,cAAe,WACf,SAAU,WACV,UAAW,GACX,YAAa,GACb,gBAAiB,yBACnB,CAAC,EACD,IAAIC,EAAW,IAAIC,EAAe,aAAc,CAAE,aAAc,IAAK,aAAc,KAAK,CAAG,EAEpF,MAAMC,EAAO,CAClB,gBAAiB,SAAS,cAAc,mBAAmB,EAC3D,QAAS,SAAS,cAAc,UAAU,EAC1C,OAAQ,SAAS,cAAc,SAAS,CAC1C,EAEMC,EAAmB,SAAS,cAAc,UAAU,EAC1DA,EAAiB,iBAAiB,SAAUC,CAAmB,EAErD,SAASA,EAAoBC,EAAQ,CAC3C,MAAMC,EAAU,SAAS,uBAAuB,UAAU,EAC1DA,EAAQ,UAAY,GACpB,MAAMC,EAASF,EACd,IAAKG,GACJ;AAAA;AAAA,oCAE8BA,EAAM,aAAa;AAAA,sCACjBA,EAAM,YAAY,UAAUA,EAAM,IAAI,YAAYA,EAAM,IAAI;AAAA;AAAA,uCAE3DA,EAAM,KAAK;AAAA,uCACXA,EAAM,KAAK;AAAA,0CACRA,EAAM,QAAQ;AAAA,2CACbA,EAAM,SAAS;AAAA;AAAA;AAAA,MAGlD,EACD,KAAK,EAAE,EACRL,EAAiB,mBAAmB,YAAaI,CAAM,EACvDP,EAAS,QAAO,CAGtB,CAGO,SAASS,EAAiBC,EAAO,CACtC,OAAQA,EACV,CACI,IAAK,UACHX,EAAS,QAAQ,CACf,MAAO,QACP,QAAS,2BACjB,CAAO,EACD,MACF,IAAK,SACHA,EAAS,QAAQ,CACf,MAAO,QACP,QACE,0EACV,CAAO,EACD,MACF,QACEA,EAAS,MAAM,CACb,MAAO,QACP,QAAS,wDACjB,CAAO,EACD,KACH,CACH,CAEoB,SAAS,cAAc,2BAA2B,EACtD,SAAS,cAAc,UAAU,ECzEjDG,EAAK,gBAAgB,iBAAiB,SAAUS,CAAY,EAC5D,IAAId,EAAa,GAEhB,eAAec,EAAaC,EAAO,CAGlC,GAFEA,EAAM,eAAc,EACpBf,EAAae,EAAM,OAAO,YAAY,MAAM,YAAW,EAAG,OACxDf,IAAe,GAAI,CACrBY,EAAiB,SAAS,EAE1B,MACD,CACEP,EAAK,QAAQ,UAAY,GACzBP,EAAO,KAAO,EAGf,GAAI,CAAE,KAAM,CAAC,OAAAU,EAAQ,UAAAQ,CAAS,EAAI,MAAMjB,EAAcD,CAAM,EAC5DA,EAAO,QAAW,KAAK,KAAKkB,EAAWlB,EAAO,QAAQ,EACtD,QAAQ,IAAIU,EAAQQ,CAAS,CACzB,OAAQH,EAAO,CACd,QAAQ,IAAIA,CAAK,CAClB,CAEHd,EAAcC,CAAU,EACxB,KAAKiB,GAAQ,CACZV,EAAoBU,EAAK,IAAI,EAEzBA,EAAK,YAAc,GACrBL,EAAiB,QAAQ,CAEjC,CAAG,EAAE,MAAMC,GAAS,CAEhB,QAAQ,IAAIA,CAAK,EACjBD,EAAiBC,CAAK,CAC1B,CAAW,EACN,QAAQ,IACPE,EAAM,OAAO,MAAK,CAAE,CACrB"}